package com.frauddetect.fraudshield;

import android.os.Bundle;
import android.util.Log;
import android.view.SurfaceControl;
import android.view.WindowManager;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import com.frauddetect.fraudshield.Models.ApiClient;
import com.frauddetect.fraudshield.Models.SupabaseApi;
import com.frauddetect.fraudshield.Models.Transactions;
import com.frauddetect.fraudshield.Models.User;

import java.io.IOException;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class PenTestActivity extends AppCompatActivity {

    private static final String TAG = "PenTest";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);

        runUserEndpointTests();
        runTransactionsTest();

    }

    private void runUserEndpointTests() {
        SupabaseApi api = ApiClient.getClient().create(SupabaseApi.class);
        Call<List<User>> call = api.getUserById("275e442a-dc83-4af0-aeea-80eaa1ed77349");

        call.enqueue(new Callback<List<User>>() {
            @Override
            public void onResponse(Call<List<User>> call, Response<List<User>> response) {
                int code = response.code();
                if (!response.isSuccessful()) {
                    String err = "";
                    try {
                        if (response.errorBody() != null) {
                            err = response.errorBody().string();
                        }
                    } catch (IOException e) {
                        err = "error reading errorBody: " + e.getMessage();
                    }
                    Log.d(TAG, "User endpoint blocked. HTTP " + code + " | message: " + err);
                } else {
                    Log.w(TAG, "User endpoint unexpectedly allowed access! Body: " + response.body());
                }
            }

            @Override
            public void onFailure(Call<List<User>> call, Throwable t) {
                Log.e(TAG, "User request failed (network/other): " + t.getClass().getSimpleName() + " - " + t.getMessage());
            }
        });
    }

    private void runTransactionsTest() {
        SupabaseApi api = ApiClient.getClient().create(SupabaseApi.class);
        Call<List<Transactions>> call = api.getAllTransactions("275e442a-dc83-4af0-aeea-80eaa1ed77349");

        call.enqueue(new Callback<List<Transactions>>() {
            @Override
            public void onResponse(Call<List<Transactions>> call, Response<List<Transactions>> response) {
                if (!response.isSuccessful()) {
                    String err = "";
                    try {
                        if (response.errorBody() != null) {
                            err = response.errorBody().string();
                        }
                    } catch (IOException e) {
                        err = e.getMessage();
                    }
                    Log.d(TAG, "Transactions endpoint blocked. HTTP " + response.code() + " | message: " + err);
                } else {
                    Log.w(TAG, "Transactions unexpectedly allowed unauthenticated access: " + response.body());
                }
            }

            @Override
            public void onFailure(Call<List<Transactions>> call, Throwable t) {
                Log.e(TAG, "Transactions request failed: " + t.getMessage());
            }
        });
    }

}